"use strict";const appForm=document.querySelector(".app__form"),stopwatchForm=document.querySelector(".stopwatch__form"),allInputs=document.querySelectorAll(".app__input"),inputControlsBox=document.querySelectorAll(".app__input-controls"),inputHours=document.querySelector(".app__input--hours"),inputHoursStopwatch=document.querySelector(".stopwatch__form .app__input--hours"),inputMinutes=document.querySelector(".app__input-minutes"),inputMinutesStopwatch=document.querySelector(".stopwatch__form .app__input-minutes"),inputSeconds=document.querySelector(".app__input-seconds"),inputSecondsStopwatch=document.querySelector(".stopwatch__form .app__input-seconds"),inputSecondsBox=document.querySelector(".app__input-box--seconds"),btnStart=document.querySelector(".app__form-control--start"),btnStartStopwatch=document.querySelector(".stopwatch__form .app__form-control--start"),btnReset=document.querySelector(".app__form-control--reset"),btnResetStopwatch=document.querySelector(".stopwatch__form .app__form-control--reset"),pageTitle=document.querySelector("h1"),tabsBox=document.querySelector(".app__controls"),allTabs=document.querySelectorAll(".app__control"),formControls=document.querySelector(".app__form-controls"),formControlsStopwatch=document.querySelector(".stopwatch__form .app__form-controls"),formRow=document.querySelector(".app__form-row"),formRowStopwatch=document.querySelector(".stopwatch__form .app__form-row"),timerTabBtn=document.querySelector("#timer_tab_btn"),stopwatchTabBtn=document.querySelector("#stopwatch_tab_btn"),changeColorsBox=document.querySelector(".change-colors__list"),changeColorsBtn=document.querySelector(".change-colors__btn"),audioNotification=new Audio("sounds/soft-bell.mp3");audioNotification.loop=!0;let audioPlayedTimes=0;audioNotification.addEventListener("seeked",(function(){audioPlayedTimes+=1,audioPlayedTimes>3&&(audioNotification.pause(),audioPlayedTimes=0)}));const Logic=new App,Visual=new Visuals;function handleKeyboardClick(t){if("KeyR"===t&&timerTabBtn.classList.contains("active")&&handleTimerStopBtnClick(),"KeyP"===t&&timerTabBtn.classList.contains("active"))pauseTimer();else{if("Minus"===t&&timerTabBtn.classList.contains("active")){let t=Logic.getState().minutes;return(t-=1)<0&&Logic.getState().hours>0?(Logic.getState().hours-=1,Logic.getState().minutes=59,Visual.displayTime(inputMinutes,Logic.getState().minutes),void Visual.displayTime(inputHours,Logic.getState().hours)):(Logic.changeTime("minutes","minus"),void Visual.displayTime(inputMinutes,Logic.getState().minutes))}if("Equal"===t&&timerTabBtn.classList.contains("active"))return Logic.changeTime("minutes","plus"),Logic.getState().minutes>59&&(Logic.getState().minutes=0,Logic.getState().hours+=1),Visual.displayTime(inputHours,Logic.getState().hours),void Visual.displayTime(inputMinutes,Logic.getState().minutes);if("KeyP"===t&&stopwatchTabBtn.classList.contains("active"))pauseStopwatch();else{if("KeyR"===t&&stopwatchTabBtn.classList.contains("active")&&handleStopwatchStopBtnClicked(),"KeyS"===t&&timerTabBtn.classList.contains("active")&&(handleTimerStartBtnClick(),allInputs.forEach((t=>t.blur()))),"KeyS"===t&&stopwatchTabBtn.classList.contains("active")&&handleStopwatchStartBtnClicked(),"KeyT"===t&&timerTabBtn.classList.contains("active"))return console.log(`${Logic.getCurrentTime()}: switched to stopwatch`),void document.querySelector("#stopwatch_tab_btn").click();"KeyT"===t&&stopwatchTabBtn.classList.contains("active")&&(console.log(`${Logic.getCurrentTime()}: switched to timer`),document.querySelector("#timer_tab_btn").click())}}}function handleTimerControlsClick(t,e){t&&e&&(Logic.changeTime(e,t),"plus"===t&&"hours"===e&&Visual.displayTime(inputHours,Logic.getState().hours),"minus"===t&&"hours"===e&&Visual.displayTime(inputHours,Logic.getState().hours),"plus"===t&&"minutes"===e&&Visual.displayTime(inputMinutes,Logic.getState().minutes),"minus"===t&&"minutes"===e&&Visual.displayTime(inputMinutes,Logic.getState().minutes))}function handleTimerStartBtnClick(){if(0!=inputHours.value||0!=inputMinutes.value||0!=inputSeconds.value)if("Pause"!==btnStart.textContent){if("Resume"===btnStart.textContent)return Visual.updateTitle(Logic.getTime()),btnStart.textContent="Pause",console.log(`${Logic.getCurrentTime()}: timer resumed, ${Logic.getTime()}`),startTicking(),void document.querySelector(".app__form .app__form-row").classList.remove("blink");console.log(`${Logic.getCurrentTime()}: timer started, ${Logic.getTime()}`),Visual.initializeTimer(),Logic.updateState([+inputHours.value,+inputMinutes.value]),Visual.updateTitle(Logic.getTime()),startTicking(),document.querySelector(".app__popular-options").style.opacity="0.1",document.querySelector(".app__popular-options").style.pointerEvents="none"}else pauseTimer();else alert(Visual.errorMessage)}function checkIfTimerDone(){0===Logic.getState().hours&&0===Logic.getState().minutes&&0===Logic.getState().seconds&&(clearInterval(Visual.ticker),Logic.updateState([]),Visual.updateTimeUI("",[]),console.log(`${Logic.getCurrentTime()}: timer finished`),Visual.accentuateTime("putBack"),inputSecondsBox.style.display="none",Visual.updateTitle("*** Timer Has Finished ***"),audioNotification.play(),formRow.insertAdjacentHTML("afterend",`<div class="message">timer stopped at ${Logic.getCurrentTime()}</div>`),btnStart.textContent="Start",btnStart.style.opacity="0.15",btnStart.classList.add("disabled"))}function handleTimerStopBtnClick(){console.log(`${Logic.getCurrentTime()}: counting aborted`),btnStart.textContent="Start",Visual.timerCleanUp(),clearInterval(Visual.ticker),Visual.accentuateTime("putBack"),Logic.updateState([]),Visual.updateTimeUI("",Logic.getState("onlyValues")),audioNotification.pause(),audioNotification.currentTime=0,document.querySelector(".app__form .app__form-row").classList.remove("blink"),document.querySelector(".app__popular-options").style.opacity="0.5",document.querySelector(".app__popular-options").style.pointerEvents="all",audioPlayedTimes=0}function handleTabBtnClick(){timerTabBtn.classList.contains("active")&&(console.log(`${Logic.getCurrentTime()}: switched to timer`),handleStopwatchStopBtnClicked()),stopwatchTabBtn.classList.contains("active")&&(console.log(`${Logic.getCurrentTime()}: switched to stopwatch`),handleTimerStopBtnClick())}function handleStopwatchStartBtnClicked(){if("Pause"!==btnStartStopwatch.textContent){if("Resume"===btnStartStopwatch.textContent)return console.log(`${Logic.getCurrentTime()}: stopwatch resumed, ${Logic.getStopwatchTime()}`),startTickingStopwatch(),void document.querySelector(".stopwatch__form .app__form-row").classList.remove("blink");console.log(`${Logic.getCurrentTime()}: stopwatch started`),btnStartStopwatch.textContent="Pause",Logic.updateState([0,0,0,+inputHoursStopwatch.value,+inputMinutesStopwatch.value,+inputSecondsStopwatch.value]),Visual.updateTitle(Logic.getStopwatchTime()),Visual.accentuateTime("","stopwatch"),startTickingStopwatch()}else pauseStopwatch()}function handleStopwatchStopBtnClicked(){console.log(`${Logic.getCurrentTime()}: counting aborted`),btnStartStopwatch.style.opacity="1",btnStartStopwatch.classList.remove("disabled"),btnStartStopwatch.textContent="Start",Visual.updateTitle("Your Timer / Stopwatch"),clearInterval(Visual.tickerStopwatch),Visual.accentuateTime("putBack","stopwatch"),Logic.updateState([]),Visual.updateTimeUI("stopwatch",[]),document.querySelector(".stopwatch__form .app__form-row").classList.remove("blink")}function startTicking(){Visual.ticker=setInterval((()=>{Logic.tick(),Visual.updateTitle(Logic.getTime()),Visual.updateTimeUI("",Logic.getState("onlyValues")),checkIfTimerDone()}),1e3)}function startTickingStopwatch(){btnStartStopwatch.textContent="Pause",Visual.updateTitle(Logic.getStopwatchTime()),Visual.tickerStopwatch=setInterval((()=>{Logic.tick("stopwatch"),Visual.updateTitle(Logic.getStopwatchTime()),Visual.updateTimeUI("stopwatch",Logic.getState("onlyValues"))}),1e3)}function pauseTimer(){document.querySelector(".app__form .app__form-row").classList.add("blink"),btnStart.textContent="Resume",console.log(`${Logic.getCurrentTime()}: timer paused, ${Logic.getTime()}`),Visual.updateTitle(`${Logic.getTime()} ⏸`),clearInterval(Visual.ticker)}function pauseStopwatch(){document.querySelector(".stopwatch__form .app__form-row").classList.add("blink"),btnStartStopwatch.textContent="Resume",console.log(`${Logic.getCurrentTime()}: stopwatch paused, ${Logic.getStopwatchTime()}`),Visual.updateTitle(`${Logic.getStopwatchTime()} ⏸`),clearInterval(Visual.tickerStopwatch)}function handleTimerOptionBtnClicked(t){const e=t.split(",").map((t=>+t)),[o,i,a]=e;Logic.updateState([o,i,a,0,0,0]),console.log(`${Logic.getCurrentTime()}: timer started, ${Logic.getTime()}`),Visual.updateTimeUI("",[o,i,a,0,0,0]),Visual.initializeTimer(),Visual.updateTitle(Logic.getTime()),startTicking(),document.querySelector(".app__popular-options").style.opacity="0.1",document.querySelector(".app__popular-options").style.pointerEvents="none"}Visual.start(),appForm.addEventListener("submit",(t=>t.preventDefault())),stopwatchForm.addEventListener("submit",(t=>t.preventDefault())),Visual.keyboardUsed(handleKeyboardClick),Visual.tabBtnClicked(handleTabBtnClick),Visual.timerControlsClicked(handleTimerControlsClick),Visual.timerStartBtnClicked(handleTimerStartBtnClick),Visual.timerStopBtnClicked(handleTimerStopBtnClick),Visual.stopwatchStartBtnClicked(handleStopwatchStartBtnClicked),Visual.stopwatchStopBtnClicked(handleStopwatchStopBtnClicked),Visual.timerOptionBtnClicked(handleTimerOptionBtnClicked),Visual.changeColorBtnClicked(),Visual.changeColorsBtnClicked(),Visual.listenClickOutsideColors();